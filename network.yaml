Description: >
    Isaac Ndarwa / Udacity Cloud DevOps Engineer ND Project 2
    Deploy VPC, with 2 public and private subnets spread across two AZs.
    Deploys an IGW, with a default route on the public subnets.
    Deploys 2 NAT Gateways across AZs,& default routes for them in the private subnets.

Parameters:

    EnvironmentName:
        Description: Environment name to be prefixed to resources
        Type: String

    VpcCIDR: 
        Description: Enter the IP range for this VPC
        Type: String
        Default: 10.0.0.0/16

    PublicSubnet1CIDR:
        Description: Enter the IP range for the public subnet in the first AZ
        Type: String
        Default: 10.0.0.0/24

    PublicSubnet2CIDR:
        Description: Enter the IP range for the public subnet in the second AZ
        Type: String
        Default: 10.0.1.0/24

    PrivateSubnet1CIDR:
        Description: Enter the IP range for the private subnet in the first AZ
        Type: String
        Default: 10.0.2.0/24

    PrivateSubnet2CIDR:
        Description: Enter the IP range for the private subnet in the second AZ
        Type: String
        Default: 10.0.3.0/24

Resources:

    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags: 
                - Key: Name 
                  Value: !Ref EnvironmentName
                  # Environment name tags all resources created
            
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName
            
    # Associate the created IGW to the VPC        
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC
            # Refer to a resource by name

    # Create the subnets
    # Public Subnet in AZ1
    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
        # Must reference the VPC resource so CloudFormation knows where to deploy
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            # Reference the defined parameter
            CidrBlock: !Ref PublicSubnet1CIDR
            # Resources deployed get a public IP on launch
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    # Public Subnet in AZ2
    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            # Select function picks a value from a provided list of values, which in this case is also a function
            # GetAZs returns a list of AZs available in the region
            # Picks the second array value
            # This ensures the 2 subnets are  in different AZs
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
    
    # Private Subnet in AZ1
    PrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            # Subnet has to be in the current VPC
            CidrBlock: !Ref PrivateSubnet1CIDR
            # Resources deployed do not get a public IP on launch
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    # Private Subnet in AZ2
    PrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
    
    # NAT GWs & ElasticIPs
    NatGateway1EIP:
        Type: AWS::EC2::EIP
        # This resource won't be created until the IGWAttachment is working properly
        DependsOn: InternetGatewayAttachment
        Properties: 
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway1: 
        Type: AWS::EC2::NatGateway
        Properties:
            # The GetAtt function pulls the IP address allocated on EIP
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    # Route Tables, Rules/Routes & Subnet-RouteTable Associations
    # Create Public Route Table
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            # Attach to the VPC resource
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes

    # Default Routing rule for Public subnet
    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            # Assign to Route Table
            RouteTableId: !Ref PublicRouteTable
            # Rule - All traffic whose destination matches wildcard, forward to specified resource - IGW
            # This rule will apply to all traffic with destination outside the VPC
            # Traffic within VPC follows default VPC rule
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    # Associate RouteTable with Subnet1
    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    # Associate RouteTable with Subnet2
    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2
    
    # Create Private Route Table, Routing Rule & Associate with the Private Subnets
    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            # Rule - All traffic whose destination matches wildcard, forward to specified resource - NAT GW
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2



Outputs: 
    # Other scripts using the same VPC to deploy different resources
    # This captures the VPCID & stores it for use by another file
    VPC: 
        Description: Reference to the created VPC
        Value: !Ref VPC
        # Sub takes the variable and appends some text
        Export:
          Name: !Sub ${EnvironmentName}-VPCID

    VPCPublicRouteTable:
        Description: Public Routing
        Value: !Ref PublicRouteTable
        Export:
          Name: !Sub ${EnvironmentName}-PUB-RT

    VPCPrivateRouteTable1:
        Description: Private Routing AZ1
        Value: !Ref PrivateRouteTable1
        Export:
          Name: !Sub ${EnvironmentName}-PRI1-RT

    VPCPrivateRouteTable2:
        Description: Private Routing AZ2
        Value: !Ref PrivateRouteTable2
        Export:
          Name: !Sub ${EnvironmentName}-PRI2-RT

    PublicSubnets:
        Description: A list of the public subnets
        # Join combines values separated by a delimiter
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PUB-NETS

    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PRIV-NETS

    PublicSubnet1:
        Description: Reference to the public subnet in the 1st AZ
        Value: !Ref PublicSubnet1
        Export:
          Name: !Sub ${EnvironmentName}-PUB1-SN

    PublicSubnet2: 
        Description: Reference to the public subnet in the 2nd AZ
        Value: !Ref PublicSubnet2
        Export:
          Name: !Sub ${EnvironmentName}-PUB2-SN

    PrivateSubnet1:
        Description: Reference to the private subnet in the 1st AZ
        Value: !Ref PrivateSubnet1
        Export:
          Name: !Sub ${EnvironmentName}-PRI1-SN

    PrivateSubnet2: 
        Description: Reference to the private subnet in the 2nd AZ
        Value: !Ref PrivateSubnet2
        Export:
          Name: !Sub ${EnvironmentName}-PRI2-SN